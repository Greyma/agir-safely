import connectDB from './config/database.js';
import Accident from './models/Accident.js';
import User from './models/User.js';

async function addSampleAccidents() {
  console.log('üîß Adding sample accidents to database...\n');

  try {
    // Connect to database
    await connectDB();
    console.log('‚úÖ Connected to MongoDB');

    // Get the test user
    const testUser = await User.findOne({ email: 'test@agirsafely.com' });
    if (!testUser) {
      console.log('‚ùå Test user not found. Please run add-test-user.js first.');
      return;
    }

    // Check if accidents already exist
    const existingAccidents = await Accident.find();
    if (existingAccidents.length > 0) {
      console.log('‚ö†Ô∏è  Sample accidents already exist in database');
      return;
    }

    // Sample accident data
    const sampleAccidents = [
      {
        title: "Coupure mineure √† la main droite",
        description: "Coupure mineure √† la main droite lors de la manipulation d'une pi√®ce m√©tallique dans la zone de d√©coupe. L'employ√© portait des gants mais ils √©taient us√©s.",
        date: new Date('2024-01-15'),
        location: "Atelier A - Zone de d√©coupe",
        severity: "minor",
        type: "cut",
        status: "reported",
        reportedBy: testUser._id,
        immediateActions: ["Premiers soins appliqu√©s", "Zone s√©curis√©e"],
        rootCause: "Gants de protection us√©s",
        preventiveMeasures: ["Remplacer les gants r√©guli√®rement", "Formation sur l'utilisation des EPI"]
      },
      {
        title: "Chute de cartons depuis une √©tag√®re",
        description: "Chute de cartons depuis une √©tag√®re haute dans l'entrep√¥t. L'employ√© a re√ßu une contusion √† l'√©paule droite.",
        date: new Date('2024-01-10'),
        location: "Entrep√¥t B - All√©e 3",
        severity: "moderate",
        type: "fall",
        status: "investigating",
        reportedBy: testUser._id,
        immediateActions: ["√âvacuation vers l'infirmerie", "Zone ferm√©e temporairement"],
        rootCause: "Empilement instable des cartons",
        preventiveMeasures: ["Formation sur l'empilement s√©curis√©", "Inspection r√©guli√®re des √©tag√®res"]
      },
      {
        title: "Projection de liquide chimique",
        description: "Projection de liquide chimique lors du transfert d'un r√©actif. Br√ªlure l√©g√®re au bras gauche de l'op√©rateur.",
        date: new Date('2024-01-05'),
        location: "Zone de production - Ligne 2",
        severity: "moderate",
        type: "chemical",
        status: "resolved",
        reportedBy: testUser._id,
        immediateActions: ["Rin√ßage imm√©diat √† l'eau", "√âvacuation m√©dicale"],
        rootCause: "Proc√©dure de transfert non respect√©e",
        preventiveMeasures: ["R√©vision des proc√©dures", "Formation renforc√©e", "√âquipement de protection suppl√©mentaire"]
      },
      {
        title: "Glissade sur sol mouill√©",
        description: "Glissade sur sol mouill√© dans les sanitaires. L'employ√© a eu une entorse √† la cheville.",
        date: new Date('2024-01-20'),
        location: "Sanitaires - B√¢timent principal",
        severity: "minor",
        type: "slip",
        status: "reported",
        reportedBy: testUser._id,
        immediateActions: ["Premiers soins", "Signalisation de la zone"],
        rootCause: "Sol non s√©ch√© apr√®s nettoyage",
        preventiveMeasures: ["Panneaux d'avertissement", "Proc√©dure de s√©chage am√©lior√©e"]
      }
    ];

    // Create accidents
    for (const accidentData of sampleAccidents) {
      const accident = new Accident(accidentData);
      await accident.save();
      console.log(`‚úÖ Created accident: ${accident.title}`);
    }

    console.log(`\nüéâ Successfully created ${sampleAccidents.length} sample accidents!`);

  } catch (error) {
    console.error('‚ùå Error creating sample accidents:', error.message);
  } finally {
    // Close database connection
    process.exit(0);
  }
}

// Run the script
addSampleAccidents(); 